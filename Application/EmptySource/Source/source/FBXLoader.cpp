
#include <fbxsdk.h>
#include "../include/FBXLoader.h"

FbxManager * FBXLoader::gSdkManager = NULL;

void FBXLoader::InitializeSdkManager() {
	// Create the FBX SDK memory manager object.
	// The SDK Manager allocates and frees memory
	// for almost all the classes in the SDK.
	gSdkManager = FbxManager::Create();

	// create an IOSettings object
	FbxIOSettings * IOS = FbxIOSettings::Create(gSdkManager, IOSROOT);
	gSdkManager->SetIOSettings(IOS);

}


bool FBXLoader::LoadScene(FbxScene * pScene, FileStream * File) {
	int lFileMajor, lFileMinor, lFileRevision;
	int lSDKMajor, lSDKMinor, lSDKRevision;
	// int i, lAnimStackCount;
	bool lStatus;
	char lPassword[1024];
	const char * FileName = WStringToString(File->GetPath()).c_str();

	// --- Get the version number of the FBX files generated by the
	// --- Version of FBX SDK that you are using.
	FbxManager::GetFileFormatVersion(lSDKMajor, lSDKMinor, lSDKRevision);

	// --- Create an importer.
	FbxImporter* lImporter = FbxImporter::Create(gSdkManager, "");

	// --- Initialize the importer by providing a filename.
	const bool lImportStatus = lImporter->Initialize(FileName, -1, gSdkManager->GetIOSettings());

	// --- Get the version number of the FBX file format.
	lImporter->GetFileVersion(lFileMajor, lFileMinor, lFileRevision);

	// --- Problem with the file to be imported
	if (!lImportStatus) {
		FbxString error = lImporter->GetStatus().GetErrorString();
		Debug::Log(Debug::LogError, L"Call to FbxImporter::Initialize() failed.\nError returned : %s", error.Buffer());

		if (lImporter->GetStatus().GetCode() == FbxStatus::eInvalidFileVersion) {
			Debug::Log(Debug::LogError, L"├> FBX version number for this FBX SDK is %d.%d.%d",
				lSDKMajor, lSDKMinor, lSDKRevision);
			Debug::Log(Debug::LogError, L"└> FBX version number for file %s is %d.%d.%d",
				File->GetShortPath().c_str(), lFileMajor, lFileMinor, lFileRevision);
		}

		return false;
	}

	if (lImporter->IsFBX()) {
		Debug::Log(Debug::LogInfo, L"├> FBX version number for file %s is %d.%d.%d",
			File->GetShortPath().c_str(), lFileMajor, lFileMinor, lFileRevision);

		// // In FBX, a scene can have one or more "animation stack". An animation stack is a
		// // container for animation data.
		// // You can access a file's animation stack information without
		// // the overhead of loading the entire file into the scene.
		// 
		// UI_Printf("Animation Stack Information");
		// 
		// lAnimStackCount = lImporter->GetAnimStackCount();
		// 
		// UI_Printf("    Number of animation stacks: %d", lAnimStackCount);
		// UI_Printf("    Active animation stack: \"%s\"",
		// 	lImporter->GetActiveAnimStackName());
		// 
		// for (i = 0; i < lAnimStackCount; i++)
		// {
		// 	FbxTakeInfo* lTakeInfo = lImporter->GetTakeInfo(i);
		// 
		// 	UI_Printf("    Animation Stack %d", i);
		// 	UI_Printf("         Name: \"%s\"", lTakeInfo->mName.Buffer());
		// 	UI_Printf("         Description: \"%s\"",
		// 		lTakeInfo->mDescription.Buffer());
		// 
		// 	// Change the value of the import name if the animation stack should
		// 	// be imported under a different name.
		// 	UI_Printf("         Import Name: \"%s\"", lTakeInfo->mImportName.Buffer());
		// 
		// 	// Set the value of the import state to false
		// 	// if the animation stack should be not be imported.
		// 	UI_Printf("         Import State: %s", lTakeInfo->mSelect ? "true" : "false");
		// }

		// Import options determine what kind of data is to be imported.
		// The default is true, but here we set the options explictly.

		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_MATERIAL, false);
		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_TEXTURE, false);
		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_LINK, true);
		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_SHAPE, true);
		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_GOBO, true);
		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_ANIMATION, true);
		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_GLOBAL_SETTINGS, true);
	}

	// Import the scene.
	lStatus = lImporter->Import(pScene);

	if (lStatus == false &&     // The import file may have a password
		lImporter->GetStatus().GetCode() == FbxStatus::ePasswordError)
	{
		Debug::LogUnadorned(Debug::LogInfo, L"Please enter password: ");

		lPassword[0] = '\0';

		FBXSDK_CRT_SECURE_NO_WARNING_BEGIN
			scanf("%s", lPassword);
		FBXSDK_CRT_SECURE_NO_WARNING_END
			FbxString lString(lPassword);

		(*(gSdkManager->GetIOSettings())).SetStringProp(IMP_FBX_PASSWORD, lString);
		(*(gSdkManager->GetIOSettings())).SetBoolProp(IMP_FBX_PASSWORD_ENABLE, true);


		lStatus = lImporter->Import(pScene);

		if (lStatus == false && lImporter->GetStatus().GetCode() == FbxStatus::ePasswordError) {
			Debug::Log(Debug::LogError, L"└> Incorrect password: file not imported.");
		}
	}

	// Destroy the importer
	lImporter->Destroy();

	return lStatus;
}

bool FBXLoader::Load(FileStream * File, TArray<MeshFaces>* Faces, TArray<MeshVertices>* Vertices, TArray<Box3D>* BoundingBoxes, bool Optimize) {
	if (gSdkManager == NULL)
		InitializeSdkManager();

	FbxScene* LoadedScene = FbxScene::Create(gSdkManager, WStringToString(File->GetShortPath()).c_str());

	bool bStatus = LoadScene(LoadedScene, File);

	// This function show how to cycle through scene elements in a linear way.
	const int NodeCount = LoadedScene->GetSrcObjectCount<FbxNode>();
	FbxStatus lStatus;

	for (int NodeIndex = 0; NodeIndex < NodeCount; NodeIndex++) {
		FbxNode * Node = LoadedScene->GetSrcObject<FbxNode>(NodeIndex);
		FbxGeometry * Geometry = Node->GetGeometry();
		if (Geometry) {
			int VertexCacheDeformerCount = Node->GetGeometry()->GetDeformerCount(FbxDeformer::eVertexCache);
			int i = 0;
			for (; i < VertexCacheDeformerCount; ++i) {
				// Get the Point Cache object
				FbxVertexCacheDeformer* Deformer = static_cast<FbxVertexCacheDeformer*>(Node->GetGeometry()->GetDeformer(i, FbxDeformer::eVertexCache));
			}
		}
	}

	return bStatus;
}
